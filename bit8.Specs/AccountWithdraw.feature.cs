// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace bit8.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Withdrawal from Account", Description="\tIn order to play and get winnings\r\n\tAs a playeraccount_id\r\n\tI want to withdraw f" +
        "unds from my account", SourceFile="AccountWithdraw.feature", SourceLine=0)]
    public partial class WithdrawalFromAccountFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AccountWithdraw.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Withdrawal from Account", "\tIn order to play and get winnings\r\n\tAs a playeraccount_id\r\n\tI want to withdraw f" +
                    "unds from my account", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CustomerSuccessfullyWithdrawsMoney(string balance, string cash, string new_Balance, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "withdrawing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer successfully withdraws money", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given(string.Format("An account {0}", balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("I withdraw {0} and the withdrawall is successful", cash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("I get {0} of the account", new_Balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Customer successfully withdraws money, Variant 0", new string[] {
                "withdrawing"}, SourceLine=12)]
        public virtual void CustomerSuccessfullyWithdrawsMoney_Variant0()
        {
#line 7
this.CustomerSuccessfullyWithdrawsMoney("100", "20", "80", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Customer successfully withdraws money, Variant 1", new string[] {
                "withdrawing"}, SourceLine=12)]
        public virtual void CustomerSuccessfullyWithdrawsMoney_Variant1()
        {
#line 7
this.CustomerSuccessfullyWithdrawsMoney("100", "100", "0", ((string[])(null)));
#line hidden
        }
        
        public virtual void CustomerFailsToWithdrawMoney(string balance, string cash, string information, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "withdrawing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customer fails to withdraw money", @__tags);
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given(string.Format("An account {0}", balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When(string.Format("I withdraw {0} and the withdrawall is unsuccessful", cash), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then(string.Format("I get {0} on the reason", information), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Customer fails to withdraw money, Variant 0", new string[] {
                "withdrawing"}, SourceLine=22)]
        public virtual void CustomerFailsToWithdrawMoney_Variant0()
        {
#line 17
this.CustomerFailsToWithdrawMoney("10", "20", "Not enough funds", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Customer fails to withdraw money, Variant 1", new string[] {
                "withdrawing"}, SourceLine=22)]
        public virtual void CustomerFailsToWithdrawMoney_Variant1()
        {
#line 17
this.CustomerFailsToWithdrawMoney("0", "30", "Not enough funds", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Customer fails to withdraw money, Variant 2", new string[] {
                "withdrawing"}, SourceLine=22)]
        public virtual void CustomerFailsToWithdrawMoney_Variant2()
        {
#line 17
this.CustomerFailsToWithdrawMoney("-10", "30", "Not enough funds", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
