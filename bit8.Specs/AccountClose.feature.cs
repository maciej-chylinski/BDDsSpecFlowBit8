// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace bit8.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Close Account", Description="\tIn order customer could not play on my site\r\n\tAs a management system\r\n\tI want to" +
        " close existing customer accounts so that the customer will not be able to play", SourceFile="AccountClose.feature", SourceLine=0)]
    public partial class CloseAccountFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AccountClose.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Close Account", "\tIn order customer could not play on my site\r\n\tAs a management system\r\n\tI want to" +
                    " close existing customer accounts so that the customer will not be able to play", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AccountFailsToBeClosedWhenThereIsMoneyOnIt(string money, string unsuccessful, string reason, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "account_closing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account fails to be closed when there is money on it", @__tags);
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("A customer\'s account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.When(string.Format("There is {0} on it", money), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("Closing is {0} and I get informed of the {1}", unsuccessful, reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Account fails to be closed when there is money on it, 100", new string[] {
                "account_closing"}, SourceLine=12)]
        public virtual void AccountFailsToBeClosedWhenThereIsMoneyOnIt_100()
        {
#line 7
 this.AccountFailsToBeClosedWhenThereIsMoneyOnIt("100", "true", "Money on account", ((string[])(null)));
#line hidden
        }
        
        public virtual void ClosedAccountFailsToBeClosedOnceAgain(string closed, string unsuccessful, string reason, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "account_closing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Closed account fails to be closed once again", @__tags);
#line 16
 this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("A customer\'s account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When(string.Format("It is already {0}", closed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then(string.Format("Closing is {0} and I get informed of the {1}", unsuccessful, reason), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Closed account fails to be closed once again, true", new string[] {
                "account_closing"}, SourceLine=21)]
        public virtual void ClosedAccountFailsToBeClosedOnceAgain_True()
        {
#line 16
 this.ClosedAccountFailsToBeClosedOnceAgain("true", "true", "Account already closed", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccountSuccessfullyClosed(string closed, string money, string successful, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "account_closing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account successfully closed", @__tags);
#line 25
 this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("A customer\'s account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.When(string.Format("It is not already {0}", closed), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And(string.Format("There is {0} on it", money), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then(string.Format("Closing is {0}", successful), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Account successfully closed, open", new string[] {
                "account_closing"}, SourceLine=31)]
        public virtual void AccountSuccessfullyClosed_Open()
        {
#line 25
 this.AccountSuccessfullyClosed("open", "0", "true", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
